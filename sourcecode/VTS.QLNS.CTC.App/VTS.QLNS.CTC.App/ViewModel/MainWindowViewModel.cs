using AutoMapper;
using Ionic.Zip;
using log4net;
using MaterialDesignThemes.Wpf;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using VTS.QLNS.CTC.App.Command;
using VTS.QLNS.CTC.App.Component;
using VTS.QLNS.CTC.App.Helper;
using VTS.QLNS.CTC.App.Model;
using VTS.QLNS.CTC.App.Properties;
using VTS.QLNS.CTC.App.Service;
using VTS.QLNS.CTC.App.Service.Impl;
using VTS.QLNS.CTC.App.View;
using VTS.QLNS.CTC.App.ViewModel.Budget;
using VTS.QLNS.CTC.App.ViewModel.Category;
using VTS.QLNS.CTC.App.ViewModel.Forex;
using VTS.QLNS.CTC.App.ViewModel.Investment;
using VTS.QLNS.CTC.App.ViewModel.NewSalary;
using VTS.QLNS.CTC.App.ViewModel.Salary;
using VTS.QLNS.CTC.App.ViewModel.Shared;
using VTS.QLNS.CTC.App.ViewModel.SocialInsurance;
using VTS.QLNS.CTC.App.ViewModel.SystemAdmin;
using VTS.QLNS.CTC.App.ViewModel.UserInfo;
using VTS.QLNS.CTC.Core.Domain;
using VTS.QLNS.CTC.Core.Domain.Query;
using VTS.QLNS.CTC.Core.Service;
using VTS.QLNS.CTC.Utility;
using VTS.QLNS.CTC.Utility.Enum;


namespace VTS.QLNS.CTC.App.ViewModel
{
    public class MainWindowViewModel : ViewModelBase
    {
        private readonly ILog _logger;
        private readonly ISessionService _autheticationStore;
        private readonly IConfiguration _configuration;
        private readonly IUserService _userService;
        private readonly IAuthenticationService _authenticationService;
        private readonly IStorageServiceFactory _storageServiceFactory;
        private readonly INsDonViService _nsDonViService;
        private readonly IAppVersionService _appVersionService;
        private readonly IMapper _mapper;
        private string _backupFolder;
        private readonly IDanhMucService _danhMucService;
        private readonly IDatabaseService _databaseService;
        private string _connectionString;
        private readonly SqlConnectionStringBuilder _connectionStringBuilder;
        private ConnectionType _connectionType;



        private const int FONT_SIZE = 13;
        private readonly string _imageType;
        private string _appSettingConfigPath;
        private readonly string _socialInsuranceSettingConfigPath;
        private string _dataGridConfigPath;
        private string _autoGenerateDataConfigPath;
        public bool IsLogout { get; set; }

        private ViewModelBase? _selectedItem;
        public ViewModelBase? SelectedItem
        {
            get => _selectedItem;
            set => SetProperty(ref _selectedItem, value);
        }

        private int _selectedIndex;
        public int SelectedIndex
        {
            get => _selectedIndex;
            set
            {
                SetProperty(ref _selectedIndex, value);
                CurrentPage = MenuItems.ElementAt(_selectedIndex);
            }
        }

        private int _fontSize;
        public int FontSize
        {
            get => _fontSize;
            set => SetProperty(ref _fontSize, value);
        }

        public string ColorSelected { get; set; }

        public Visibility IsVisibleDefaultAvatar
        {
            get
            {
                return IsVisibleAvatar == Visibility.Collapsed ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        public Visibility IsVisibleAvatar
        {
            get
            {
                if (!string.IsNullOrEmpty(AuthenticationToken.ImageUrl) && File.Exists(AuthenticationToken.ImageUrl))
                {
                    string extension = Path.GetExtension(AuthenticationToken.ImageUrl);
                    if (_imageType.Contains(extension.ToUpper()))
                    {
                        return Visibility.Visible;
                    }
                }
                return Visibility.Collapsed;
            }
        }

        public string ImageUrl
        {
            get => AuthenticationToken.ImageUrl;
        }

        public SessionInfo AuthenticationToken => _autheticationStore.Current;
        public override Type ContentType => typeof(MainWindow);
        public string AppVersion => Assembly.GetExecutingAssembly().GetName().Version.ToString();
        public ObservableCollection<ViewModelBase> MenuItems { get; set; }

        public RelayCommand HomeCommand { get; }
        public RelayCommand LogoutCommand { get; }
        public RelayCommand SettingCommand { get; }
        public RelayCommand GoToHomePageCommand { get; }
        public RelayCommand KeyPressF3Command { get; }
        public RelayCommand KeyPressF4Command { get; }
        public RelayCommand KeyPressF10Command { get; }
        public RelayCommand KeyPressCtrlF5Command { get; }

        public RelayCommand ViewUserDetailCommand { get; }

        public ReleaseNoteViewModel ReleaseNoteViewModel { get; }
        public HomeViewModel HomeViewModel { get; }
        public SystemAdminViewModel SystemAdminViewModel { get; }
        public CategoryViewModel CategoryViewModel { get; }
        public BudgetViewModel BudgetViewModel { get; }
        public InvestmentViewModel InvestmentViewModel { get; }
        public ForexViewModel ForexViewModel { get; }
        public ColorToolViewModel ColorToolViewModel { get; }
        public LoginViewModel LoginViewModel { get; set; }
        public SalaryViewModel SalaryViewModel { get; }
        public NewSalaryViewModel NewSalaryViewModel { get; }
        public SocialInsuranceViewModel SocialInsuranceViewModel { get; }

        public RelayCommand ManualUpdateCommand { get; }
        public RelayCommand ManualBackupCommand { get; }
        public RelayCommand ResetMigrationCommand { get; }
        public RelayCommand ShowReleaseCommand { get; }


        public string FilePath { get; private set; }

        public MainWindowViewModel(
            ILog logger,
            HomeViewModel homeViewModel,
            ReleaseNoteViewModel releaseNoteViewModel,
            SystemAdminViewModel systemAdminViewModel,
            CategoryViewModel categoryViewModel,
            BudgetViewModel budgetViewModel,
            InvestmentViewModel investmentViewModel,
            ForexViewModel forexViewModel,
            ColorToolViewModel colorToolViewModel,
            ISessionService sessionService,
            IConfiguration configuration,
            IUserService userService,
            IAuthenticationService authenticationService,
            IStorageServiceFactory storageServiceFactory,
            IAppVersionService appVersionService,
            IMapper mapper,
            INsDonViService nsDonViService,
            SalaryViewModel salaryViewModel,
            NewSalaryViewModel newSalaryViewModel,
            IDatabaseService databaseService,
            SocialInsuranceViewModel socialInsuranceViewModel,
            IDanhMucService danhMucService
            )
        {
            _logger = logger;
            _autheticationStore = sessionService;
            _configuration = configuration;
            _userService = userService;
            _authenticationService = authenticationService;
            _mapper = mapper;
            _nsDonViService = nsDonViService;
            _storageServiceFactory = storageServiceFactory;
            _appVersionService = appVersionService;
            _danhMucService = danhMucService;
            _databaseService = databaseService;

            ColorToolViewModel = colorToolViewModel;
            HomeViewModel = homeViewModel;
            ReleaseNoteViewModel = releaseNoteViewModel;
            SystemAdminViewModel = systemAdminViewModel;
            CategoryViewModel = categoryViewModel;
            BudgetViewModel = budgetViewModel;
            InvestmentViewModel = investmentViewModel;
            ForexViewModel = forexViewModel;
            SalaryViewModel = salaryViewModel;
            NewSalaryViewModel = newSalaryViewModel;

            SocialInsuranceViewModel = socialInsuranceViewModel;

            HomeViewModel.ParentPage = this;
            SystemAdminViewModel.ParentPage = this;
            CategoryViewModel.ParentPage = this;
            BudgetViewModel.ParentPage = this;
            InvestmentViewModel.ParentPage = this;
            ForexViewModel.ParentPage = this;
            SalaryViewModel.ParentPage = this;
            NewSalaryViewModel.ParentPage = this;
            SocialInsuranceViewModel.ParentPage = this;

            LogoutCommand = new RelayCommand(obj => OnLogout());
            SettingCommand = new RelayCommand(obj => OnSetting());
            GoToHomePageCommand = new RelayCommand(obj => SelectedIndex = 0);
            KeyPressF3Command = new RelayCommand(obj => OnKeyPress(KeyPress.F3));
            KeyPressF4Command = new RelayCommand(obj => OnKeyPress(KeyPress.F4));
            KeyPressF10Command = new RelayCommand(obj => OnKeyPress(KeyPress.F10));
            KeyPressCtrlF5Command = new RelayCommand(obj => OnKeyPress(KeyPress.CtrlF5));

            ViewUserDetailCommand = new RelayCommand(obj => OnViewUserDetail());
            ManualUpdateCommand = new RelayCommand(obj => OnManualUpdate());
            ManualBackupCommand = new RelayCommand(obj => OnManualBackup());
            ResetMigrationCommand = new RelayCommand(obj => OnResetMigration());
            ShowReleaseCommand = new RelayCommand(obj => ShowReleaseNote(true));

            _imageType = _configuration.GetSection("ImgType").Value;
            if (string.IsNullOrEmpty(_imageType))
            {
                _imageType = ImageConst.IMAGE_TYPE;
            }
            _logger.InfoFormat("Welcome!: Version {0}", AppVersion);
        }

        private void OnSetting()
        {
            //ColorTool colorToolWindow = new ColorTool();
            ColorToolViewModel.SavedAction = obj =>
            {
                if (obj is Color color)
                {
                    ColorSelected = color.ToString();
                }
            };
            ColorToolViewModel.ShowDialog();
            //colorToolWindow.DataContext = ColorToolViewModel;
            //colorToolWindow.ShowDialog();
        }

        private void OnLogout()
        {
            IsLogout = true;
            Window window = new Login();
            window.DataContext = LoginViewModel;
            window.Show();
            ApplicationHelper.CloseAllButThis(typeof(Login));

            GlobalVariables.AddItemsByTag("EffortCount", "0");
            _autheticationStore.Current = new SessionInfo();
            LoginViewModel.Init();
        }

        public override void Init()
        {
            base.Init();

            IsLogout = false;

            // Load config
            _appSettingConfigPath = _configuration.GetSection(ConfigHelper.CONFIG_APP_SETTING_PATH).Value;
            _dataGridConfigPath = _configuration.GetSection(ConfigHelper.CONFIG_DATA_GRID_PATH).Value;
            _autoGenerateDataConfigPath = _configuration.GetSection(ConfigHelper.CONFIG_AUTO_GENERATE_DATA_PATH).Value;

            // Update version
            CheckNewVersion();

            // Load setting
            LoaddAppSetting();
            LoadDataGridSetting();
            LoadAutoGenerateDataSetting();
            Application.Current.Properties[NSConstants.ROWHEIGHT] = NSConstants.ReportRowHeight;
            HomeViewModel.IsAfterLogIn = true;
            MenuItems = new ObservableCollection<ViewModelBase>() {
                HomeViewModel,
                SystemAdminViewModel,
                CategoryViewModel,
                BudgetViewModel,
                InvestmentViewModel,
                ForexViewModel,
                SalaryViewModel,
                NewSalaryViewModel,
                SocialInsuranceViewModel
            };

            SelectedIndex = 0;
            OnPropertyChanged(nameof(MenuItems));
            OnPropertyChanged(nameof(AuthenticationToken));
            OnPropertyChanged("IsVisibleAvatar");
            OnPropertyChanged("IsVisibleDefaultAvatar");
            OnPropertyChanged("ImageUrl");
            AuthenticationToken.PropertyChanged += Image_changed;
        }

        private void CheckNewVersion()
        {
            string currentVersion = AppVersion;
            AppVersionQuery dbInfo = _appVersionService.GetDbInfo();
            _autheticationStore.Current.DbVersion = "Phiên bản CSDL: " + dbInfo.Version;
            AppVersionQuery currentAppVersion = _appVersionService.FindCurrentAppVersion();
            if (currentAppVersion != null && !string.IsNullOrEmpty(currentAppVersion.Version) && currentVersion.CompareTo(currentAppVersion.Version) < 0)
            {
                // Update version here
                string messageUpdate = string.Format("{0}\n\n{1}", currentAppVersion.Description, "Bạn có muốn cập nhật ứng dụng?");
                UpdateVersionDialogViewModel updateVersionDialogViewModel = new UpdateVersionDialogViewModel(messageUpdate, UpdateAction);
                updateVersionDialogViewModel.ShowDialogHost();
            }
            else if (currentVersion != null && !string.IsNullOrEmpty(dbInfo.Version) && dbInfo.Version.CompareTo(currentVersion) < 0)
            {
                string messageUpdate = $"Ứng dụng chưa cập nhật thành công tại phiên bản ứng dụng: {currentVersion}, CSDL: {dbInfo.Version}";
                new NSMessageBoxViewModel(messageUpdate).ShowDialogHost();
            }
            else if (dbInfo.Version?.CompareTo("1.14.3.4") < 0)
            {
                AddSettingSocialInsurance();
                ShowReleaseNote();
            }
            else
            {
                ShowReleaseNote();
            }
        }

        private void UpdateAction()
        {
            BackUpApp();
            UpdateVersion();
        }

        private void BackUpApp()
        {
            try
            {
                string currentLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                string appBackupFolder = _configuration.GetSection(ConfigHelper.APP_BACKUP_LOCATION).Value;
                string appBackupFolderLocation = Path.Combine(currentLocation, appBackupFolder, DateTime.Now.ToStringTimeStamp());

                if (Directory.Exists(appBackupFolderLocation))
                    Directory.CreateDirectory(appBackupFolderLocation);
                IOExtensions.CopyFilesRecursively(currentLocation, appBackupFolderLocation, appBackupFolderLocation);
            }
            catch (Exception e)
            {
                _logger.Error(e.Message);
            }
        }

        private void BackUpAppManual()
        {
            try
            {

                DanhMuc danhMucBackupFolder = _danhMucService.FindByCode(DMCauHinh.BACKUP_009.ToString());
                if (danhMucBackupFolder != null)
                {
                    _backupFolder = danhMucBackupFolder.SGiaTri;
                    string currentLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                    string appBackupFolder = _configuration.GetSection(ConfigHelper.APP_BACKUP_LOCATION).Value;
                    //string appBackupFolderLocation = Path.Combine(currentLocation, appBackupFolder, DateTime.Now.ToStringTimeStamp());
                    string strFoldername = DateTime.Now.ToStringTimeStamp();
                    string appBackupFolderLocation = Path.Combine(_backupFolder, strFoldername);
                    ConnectionType _connectionType = _configuration.GetSection("DbSettings:ConnectionType").Value == ConnectionType.SqlServer.ToString() ? ConnectionType.SqlServer : ConnectionType.LocalDb;
                    string connectionString = _configuration.GetConnectionString(_connectionType.ToString());
                    string ignorePath = currentLocation + "\\AppData\\_etc";
                    string appData = appBackupFolderLocation + "\\AppData";
                    if (!Directory.Exists(appBackupFolderLocation))
                        Directory.CreateDirectory(appBackupFolderLocation);
                    IOExtensions.CopyFilesRecursively(currentLocation, appBackupFolderLocation, ignorePath);
                    if (_connectionType != ConnectionType.SqlServer)
                        BackupLocalDatafile(connectionString, appData);
                    string zipPath = _backupFolder + "\\" + strFoldername + ".zip";
                    System.IO.Compression.ZipFile.CreateFromDirectory(appBackupFolderLocation, zipPath);
                    if (Directory.Exists(appBackupFolderLocation))
                        Directory.Delete(appBackupFolderLocation, true);
                }
            }
            catch (Exception e)
            {
                _logger.Error(e);
            }
        }

        private void AddSettingSocialInsurance()
        {
            string path = _configuration.GetSection(ConfigHelper.CONFIG_REPORT_BHXH_SETTING_PATH).Value;

            List<BaoHiemXaHoiSetting> data = new List<BaoHiemXaHoiSetting>()
            {
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_BHXH_CapPhat_Lns",
                    MoTa = "Chi các chế độ BHXH",
                    NoiDung = "Cấp kinh phí chi các chế độ bảo hiểm xã hội"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_KINH_PHI_QL_CapPhat_Lns",
                    MoTa = "Chi kinh phí quản lý BHXH, BHYT",
                    NoiDung = "Cấp kinh phí quản lý bảo hiểm xã hội, bảo hiểm y tế"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_KINH_PHI_KCBQY_CapPhat_Lns",
                    MoTa = "Chi kinh phí KCB tại quân y đơn vị ",
                    NoiDung = "Cấp kinh phí KCB tại quân y đơn vị"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_KINH_PHI_KCBTS_CapPhat_Lns",
                    MoTa = "Chi kinh phí KCB tại Trường Sa",
                    NoiDung = "Cấp kinh phí KCB tại Trường Sa - DK"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_KINH_PHI_KCBBHYT_QuanNhan_CapPhat_Lns",
                    MoTa = "Chi từ nguồn kết dư Quỹ KCB BHYT quân nhân",
                    NoiDung = "Cấp kinh phí từ nguồn kết dư quỹ KCB BHYT quân nhân"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_KINH_PHI_Muasam_TTBYte_CapPhat_Lns",
                    MoTa = "Kinh phí mua sắm trang thiết bị y tế",
                    NoiDung = "Cấp kinh phí mua sắm trang thiết bị y tế"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_KINH_PHI_CSSK_HSSV_CapPhat_Lns",
                    MoTa = "Chi kinh phí chăm sóc sức khỏe ban đầu HSSV & NLĐ",
                    NoiDung = "Cấp kinh phí chăm sóc sức khỏe ban đầu học sinh, sinh viên"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_KINH_PHI_CSSK_NLD_CapPhat_Lns",
                    MoTa = "Chi kinh phí chăm sóc sức khỏe ban đầu HSSV & NLĐ",
                    NoiDung = "Cấp kinh phí chăm sóc sức khỏe ban đầu người lao động"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Cấp phát - Cấp kinh phí",
                    MaBaoCao = "rptBH_CHI_KINH_PHI_HoTro_BHTN_CapPhat_Lns",
                    MoTa = "Chi hỗ trợ BHTN",
                    NoiDung = "Cấp kinh phí chi hỗ trợ người lao động tham gia bảo hiểm thất nghiệp"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QuyetToan_BaoCaoQuyetToanThongChiBHXH",
                    MoTa = "Chi các chế độ BHXH",
                    NoiDung = "Xác nhận quyết toán chi chế độ bảo hiểm xã hội"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QTC_QKPQL_Thongtri_Loai1",
                    MoTa = "Chi kinh phí quản lý BHXH, BHYT",
                    NoiDung = "Xác quyết toán chi kinh phí quản lý bảo hiểm xã hội, bảo hiểm y tế"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QTC_KCB_ThongTriQuyetToanChiKCB",
                    MoTa = "Chi kinh phí KCB tại quân y đơn vị",
                    NoiDung = "Xác nhận quyết toán kinh phí KCB tại quân y đơn vị"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QTC_QKPK_TSDK_Thongtri_Loai2",
                    MoTa = "Chi kinh phí KCB tại Trường Sa",
                    NoiDung = "Xác nhận quyết toán kinh phí KCB tại Trường Sa - DK"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QTC_QKPK_TNKDQKCBBHYTQNTT_Thongtri_Loai2",
                    MoTa = "Chi từ nguồn kết dư Quỹ KCB BHYT quân nhân",
                    NoiDung = "Xác nhận quyết toán kinh phí từ nguồn kết dư quỹ KCB BHYT quân nhân"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QTC_QKPK_MSTT_Thongtri_Loai2",
                    MoTa = "Kinh phí mua sắm trang thiết bị y tế",
                    NoiDung = "Xác nhận quyết toánkinh phí mua sắm trang thiết bị y tế"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QTC_QKPK_HSSV_Thongtri_Loai2",
                    MoTa = "Chi kinh phí chăm sóc sức khỏe ban đầu HSSV & NLĐ",
                    NoiDung = "Xác nhận quyết toán kinh phí chăm sóc sức khỏe ban đầu học sinh, sinh viên"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QTC_QKPK_NLD_Thongtri_Loai2",
                    MoTa = "Chi kinh phí chăm sóc sức khỏe ban đầu HSSV & NLĐ",
                    NoiDung = "Xác nhận quyết toán kinh phí chăm sóc sức khỏe ban đầu người lao động"
                },
                new BaoHiemXaHoiSetting()
                {
                    Loai = "Quyết toán chi quý",
                    MaBaoCao = "rptBH_QTC_QKPK_HTBHTNTT_Thongtri_Loai2",
                    MoTa = "Chi hỗ trợ BHTN",
                    NoiDung = "Xác nhận quyết toán kinh phí chi hỗ trợ người lao động tham gia bảo hiểm thất nghiệp"
                }
            };
            try
            {
                Helper.ConfigHelper.UpdateSetting<List<BaoHiemXaHoiSetting>>(path, data);
            }
            catch (Exception e)
            {
                _logger.Error(e);
            }
        }

        private void ResetMigration()
        {
            try
            {
                ConnectionType _connectionType = _configuration.GetSection("DbSettings:ConnectionType").Value == ConnectionType.SqlServer.ToString() ? ConnectionType.SqlServer : ConnectionType.LocalDb;
                string connectionString = _configuration.GetConnectionString(_connectionType.ToString());
                SqlConnection.ClearAllPools();
                SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(connectionString);
                string fullPath = builder.AttachDBFilename;
                string schema = builder.InitialCatalog.IsEmpty() ? builder.AttachDBFilename : builder.InitialCatalog;
                string strSqlDropDB = " USE [master]; DROP DATABASE [" + schema + "];";
                if (_connectionType == ConnectionType.LocalDb)
                {
                    using (SqlConnection connection = new SqlConnection(connectionString))
                    {
                        connection.Open();
                        using (SqlCommand command = new SqlCommand())
                        {
                            command.CommandText = strSqlDropDB;
                            command.CommandType = System.Data.CommandType.Text;
                            command.Connection = connection;
                            command.ExecuteNonQuery();
                        }
                        connection.Close();
                    }

                    if (File.Exists(fullPath))
                    {
                        File.Delete(fullPath);
                    }
                }
            }
            catch (Exception e)
            {
                _logger.Error(e);
            }
        }

        public void BackupLocalDatafile(string connectionString, string filePath)
        {
            SqlConnection.ClearAllPools();
            SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(connectionString);
            string fullPath = builder.AttachDBFilename;
            // string strSqlOffDB = " USE [master]; ALTER DATABASE [" + builder.AttachDBFilename + "] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;";
            string strSqlOffDB = " USE [master]; ALTER DATABASE [" + builder.AttachDBFilename + "] SET OFFLINE;";

            //string strSqlSetReadOly = "USE [master];  ALTER DATABASE [" + builder.AttachDBFilename + "] SET READ_ONLY WITH NO_WAIT;";

            string strSqlSetOnline = "USE [master];  ALTER DATABASE [" + builder.AttachDBFilename + "] SET ONLINE;";



            try
            {

                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    using (SqlCommand command = new SqlCommand())
                    {
                        //string sql = string.Format("ALTER DATABASE [{0}] SET OFFLINE", builder.AttachDBFilename);
                        //string sql = string.Format("ALTER DATABASE [{0}] SET OFFLINE", builder.AttachDBFilename);
                        command.CommandText = strSqlOffDB;
                        command.CommandType = System.Data.CommandType.Text;
                        command.Connection = connection;
                        command.ExecuteNonQuery();
                    }

                    if (File.Exists(fullPath))
                    {
                        string mdfFileName = fullPath.Split("\\").Last();
                        File.Copy(fullPath, filePath + "\\" + mdfFileName);
                    }
                    //File.Copy(fullPath, filePath);

                    using (SqlCommand command = new SqlCommand())
                    {
                        // string sql = string.Format("ALTER DATABASE [{0}] SET ONLINE", builder.AttachDBFilename);
                        command.CommandText = strSqlSetOnline;
                        command.CommandType = System.Data.CommandType.Text;
                        command.Connection = connection;
                        command.ExecuteNonQuery();
                    }
                    connection.Close();
                }
            }
            catch (Exception e)
            {
                _logger.Error(e);
            }

        }

        private void UpdateVersion()
        {
            try
            {
                HtAppVersion appVersion = _appVersionService.FindCurrentVersion();
                if (appVersion.Filestream == null || appVersion.Filestream.Length == 0)
                {
                    return;
                }

                string applicationPath = IOExtensions.ApplicationPath;
                string appVersionFolder = _configuration.GetSection(ConfigHelper.APPVERSION_LOCATION).Value;
                string appVersionPath = Path.Combine(applicationPath, appVersionFolder, appVersion.Version);

                if (!Directory.Exists(appVersionPath))
                {
                    Directory.CreateDirectory(appVersionPath);
                }

                string zipFilePath = appVersion.Version + ".zip";
                zipFilePath = Path.Combine(appVersionPath, zipFilePath);
                using (FileStream fs = File.Create(zipFilePath))
                {
                    fs.Write(appVersion.Filestream, 0, appVersion.Filestream.Length);
                }

                using (ZipFile zipFile = new ZipFile(zipFilePath))
                {
                    zipFile.ExtractAll(appVersionPath, ExtractExistingFileAction.OverwriteSilently);
                }

                LauchUpdate(applicationPath, appVersionPath);
            }
            catch (Exception e)
            {
                _logger.Error(e.Message);
            }
        }

        private void OnManualUpdate()
        {
            System.Windows.Forms.OpenFileDialog openFileDialog = new System.Windows.Forms.OpenFileDialog();
            openFileDialog.Title = "Chọn tệp";
            openFileDialog.RestoreDirectory = true;
            openFileDialog.DefaultExt = ".zip";
            if (openFileDialog.ShowDialog() != System.Windows.Forms.DialogResult.OK)
            {
                return;
            }
            FilePath = openFileDialog.FileName;
            string extension = Path.GetExtension(FilePath);
            if (!extension.EndsWith("zip"))
            {
                System.Windows.MessageBox.Show(Resources.FileTypeInvalid, Resources.Alert, MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }
            string messageUpdate = string.Format("{0}\n", "Bạn có muốn cập nhật ứng dụng?");
            UpdateVersionDialogViewModel updateVersionDialogViewModel = new UpdateVersionDialogViewModel(messageUpdate, ManualUpdateVersion);
            updateVersionDialogViewModel.ShowDialogHost();
        }

        private void OnManualBackup()
        {
            string messageUpdate = string.Format("{0}\n", "Bạn có muốn backup ứng dụng?");
            BackupDialogViewModel updateVersionDialogViewModel = new BackupDialogViewModel(messageUpdate, BackUpAppManual);
            updateVersionDialogViewModel.ShowDialogHost();
        }

        private void OnResetMigration()
        {
            string messageUpdate = string.Format("{0}\n{1}", "Ứng dụng sẽ bị tắt và phải khởi động lại.", "Bạn có chắc chắn muốn reset ứng dụng?");
            ResetMigrationViewModel updateVersionDialogViewModel = new ResetMigrationViewModel(messageUpdate, ResetMigration, _configuration);
            updateVersionDialogViewModel.ShowDialogHost();
        }

        //private void ManualUpdateVersion()
        //{
        //    try
        //    {
        //        string applicationPath = IOExtensions.ApplicationPath;
        //        string appVersionFolder = _configuration.GetSection(ConfigHelper.APPVERSION_LOCATION).Value;
        //        string appVersionPath = Path.Combine(applicationPath, appVersionFolder, DateTime.Now.ToStringTimeStamp());

        //        if (!Directory.Exists(appVersionPath))
        //        {
        //            Directory.CreateDirectory(appVersionPath);
        //        }

        //        using (ZipFile zipFile = new ZipFile(FilePath))
        //        {
        //            zipFile.ExtractAll(appVersionPath, ExtractExistingFileAction.OverwriteSilently);
        //        }

        //        LauchUpdate(applicationPath, appVersionPath);
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.Error(ex.Message, ex);
        //        System.Windows.MessageBox.Show(Resources.FileTypeInvalid, Resources.Alert, MessageBoxButton.OK, MessageBoxImage.Information);
        //    }
        //}

        private void ManualUpdateVersion()
        {

            //BackUpApp();

            try
            {
                string applicationPath = IOExtensions.ApplicationPath;
                string appVersionFolder = _configuration.GetSection(ConfigHelper.APPVERSION_LOCATION).Value;
                string appVersionPath = Path.Combine(applicationPath, appVersionFolder, DateTime.Now.ToStringTimeStamp());

                if (!Directory.Exists(appVersionPath))
                {
                    Directory.CreateDirectory(appVersionPath);
                }

                using (Ionic.Zip.ZipFile zipFile = new Ionic.Zip.ZipFile(FilePath))
                {
                    zipFile.ExtractAll(appVersionPath, ExtractExistingFileAction.OverwriteSilently);
                }

                LauchUpdate(applicationPath, appVersionPath);
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message, ex);
                System.Windows.MessageBox.Show(Resources.FileTypeInvalid, Resources.Alert, MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }


        private void LauchUpdate(string applicationPath, string appVersionPath)
        {
            // Start update process
            string updateExecuteFileName = _configuration.GetSection(ConfigHelper.APPVERSION_UPDATE_EXECUTE_FILENAME).Value;
            string updateExecutePath = Path.Combine(appVersionPath, updateExecuteFileName);
            ProcessStartInfo process = new ProcessStartInfo();
            process.FileName = updateExecutePath;
            process.Arguments = "\"" + Path.Combine(applicationPath, "VTS.QLNS.CTC.App.exe") + "\"" + $" {AppVersion}";
            process.WorkingDirectory = appVersionPath;
            Process.Start(process);

            // Kill current process
            Process.GetCurrentProcess().Kill();
        }

        private void Image_changed(object sender, PropertyChangedEventArgs args)
        {
            if (args.PropertyName == nameof(AuthenticationToken.ImageUrl))
            {
                OnPropertyChanged("IsVisibleAvatar");
                OnPropertyChanged("IsVisibleDefaultAvatar");
                OnPropertyChanged("ImageUrl");
            }
        }

        private void OnKeyPress(KeyPress keyPress)
        {

        }

        public override void OnClose(object obj)
        {
            if (IsLogout)
            {
                base.OnClose(obj);
                UpdateAppSetting();
                UpdateDataGridSetting();
                UpdateAutoGenerateDataSetting();
                return;
            }
            //base.OnClose(obj);
            NSMessageBoxViewModel messageBox = new NSMessageBoxViewModel(Resources.BackupConfirm, Resources.ConfirmTitle, NSMessageBoxButtons.YesNoCancel, PackIconKind.BackupRestore, RefeshDataHandler, () => base.OnClose(obj));
            DialogHost.Show(messageBox.Content, "RootDialog", null, null);
            //Exit();
        }

        private void RefeshDataHandler(NSDialogResult result)
        {
            if (result == NSDialogResult.Cancel)
            {
                return;
            }
            else if (result == NSDialogResult.No)
            {
                UpdateAppSetting();
                UpdateDataGridSetting();
                UpdateAutoGenerateDataSetting();
                Application.Current.Shutdown();
            }
            else
            {
                UpdateAppSetting();
                UpdateDataGridSetting();
                UpdateAutoGenerateDataSetting();
                _connectionType = _configuration.GetSection("DbSettings:ConnectionType").Value == ConnectionType.SqlServer.ToString() ? ConnectionType.SqlServer : ConnectionType.LocalDb;
                _connectionString = _configuration.GetConnectionString(_connectionType.ToString());
                try
                {
                    string fileName = _databaseService.GetBackupFilename(_connectionString, _connectionType.ToString());
                    using System.Windows.Forms.SaveFileDialog dialog = new System.Windows.Forms.SaveFileDialog();
                    dialog.FileName = fileName;
                    dialog.Title = "Lưu file sao lưu dữ liệu";
                    System.Windows.Forms.DialogResult dialogShow = dialog.ShowDialog();

                    if (dialogShow == System.Windows.Forms.DialogResult.OK)
                    {
                        BackgroundWorkerHelper.Run((s, e) =>
                        {
                            IsLoading = true;
                            string filePath = dialog.FileName;
                            _databaseService.BackupLocal(_connectionString, fileName, filePath);
                        }, (s, e) =>
                        {
                            IsLoading = false;
                            if (e.Error is null)
                            {
                                MessageBox.Show(Resources.MsgBackupSuccess, Resources.NotifiTitle, MessageBoxButton.OK, MessageBoxImage.Information);
                                Application.Current.Shutdown();
                            }
                        });

                    }
                }
                catch (Exception ex)
                {
                    _logger.Error(ex);
                    System.Windows.MessageBox.Show(Resources.MsgBackupError, Resources.NotifiTitle, MessageBoxButton.OK, MessageBoxImage.Warning);
                }
            }
        }

        private void LoaddAppSetting()
        {
            try
            {
                AppSetting appSetting = Helper.ConfigHelper.ReadSetting<AppSetting>(_appSettingConfigPath);
                FontSize = appSetting != null ? appSetting.FontSize : FONT_SIZE;

                if (appSetting is object)
                {
                    try
                    {
                        object colorSetting = ColorConverter.ConvertFromString(appSetting.ColorSelected);
                        ColorToolViewModel.SelectedColor = colorSetting as Color?;
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                _autheticationStore.Current.YearOfWork = appSetting != null ? appSetting.YearOfWork : DateTime.Now.Year;
                _autheticationStore.Current.YearOfBudget = appSetting != null ? appSetting.YearOfBudget : 2;
                _autheticationStore.Current.Budget = appSetting != null ? appSetting.Budget : 1;

                string idsDonViQuanLy = _autheticationStore.Current.IdsDonViQuanLy;
                int namLamViec = _autheticationStore.Current.YearOfWork;
                DonVi donVi = _nsDonViService.FindByLoai("0", namLamViec);
                if (donVi != null)
                {
                    _autheticationStore.Current.TenDonVi = donVi.TenDonVi;
                    _autheticationStore.Current.IdDonVi = donVi.IIDMaDonVi;
                }

                _autheticationStore.Current.TenDonViTrucThuoc = _danhMucService.FindDonViQuanLy(namLamViec).ToUpper();
                DanhMuc danhMucDiaDiem = _danhMucService.FindByType(TypeDanhMuc.DM_CAUHINH, namLamViec).Where(n => n.IIDMaDanhMuc == MaDanhMuc.DIADIEM).FirstOrDefault();
                _autheticationStore.Current.TenDanhMucDiaDiem = danhMucDiaDiem == null ? string.Empty : danhMucDiaDiem.SGiaTri;

                if (!string.IsNullOrEmpty(idsDonViQuanLy))
                {
                    List<string> idsDonvi = idsDonViQuanLy.Split(",").ToList();
                    _autheticationStore.Current.DonViQuanLy = _nsDonViService.FindByCondition(x => idsDonvi.Contains(x.IIDMaDonVi) && namLamViec == x.NamLamViec).ToList();
                }

                string connectionType = _configuration.GetSection("DbSettings:ConnectionType").Value;
                string connectionString = _configuration.GetConnectionString(connectionType);
                SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(connectionString);
                _autheticationStore.Current.DbName = "CSDL: " + builder.InitialCatalog;
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
            }
        }

        public void Exit()
        {
            if (IsLogout)
                return;
            _connectionType = _configuration.GetSection("DbSettings:ConnectionType").Value == ConnectionType.SqlServer.ToString() ? ConnectionType.SqlServer : ConnectionType.LocalDb;
            _connectionString = _configuration.GetConnectionString(_connectionType.ToString());

            if (_connectionType != ConnectionType.SqlServer)
            {
                try
                {
                    string fileName = _databaseService.GetBackupFilename(_connectionString, _connectionType.ToString());
                    System.Windows.Forms.SaveFileDialog dialog = new System.Windows.Forms.SaveFileDialog();
                    dialog.FileName = fileName;
                    dialog.Title = "Lưu file sao lưu dữ liệu";
                    System.Windows.Forms.DialogResult result = dialog.ShowDialog();

                    if (result == System.Windows.Forms.DialogResult.OK)
                    {

                        string filePath = dialog.FileName;
                        _databaseService.BackupLocal(_connectionString, fileName, filePath);
                    }
                    MessageBoxResult resultDialog = System.Windows.MessageBox.Show(Resources.MsgBackupSuccess, Resources.NotifiTitle, MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    _logger.Error(ex);
                    System.Windows.MessageBox.Show(Resources.MsgBackupError, Resources.NotifiTitle, MessageBoxButton.OK, MessageBoxImage.Warning);
                }
            }
        }

        private void ShowReleaseNote(bool isShow = false)
        {
            string locationRelease = _configuration.GetSection(ConfigHelper.RELEASE_NOTE_LOCATION).Value;
            if (locationRelease is null) return;
            string appStatePath = Path.Combine(locationRelease, "release_state.xml");
            AppStateModel appState = ConfigHelper.ReadSetting<AppStateModel>(appStatePath);
            if ((appState is null || appState.IsUpdated) && !isShow) return;
            List<AppRelease> appReleases = new List<AppRelease>();

            string[] dirs = Directory.GetDirectories(locationRelease, "*", SearchOption.TopDirectoryOnly);
            foreach (string dir in dirs)
            {
                List<ReleaseNoteModel> releaseNotes = new List<ReleaseNoteModel>();
                if (dir.IsEmpty()) continue;
                string[] files = Directory.GetFiles(dir, "*", SearchOption.AllDirectories);
                string version = new DirectoryInfo(dir).Name;
                foreach (string file in files)
                {
                    try
                    {
                        ReleaseNoteModel releaseNote = ConfigHelper.ReadSetting<ReleaseNoteModel>(file);
                        if (releaseNote is object)
                        {
                            releaseNotes.Add(releaseNote);
                        }
                    }
                    catch
                    {
                        _logger.Error($"Wrong read release note at version: {version}");
                    }
                }
                appReleases.Add(new AppRelease()
                {
                    Version = version,
                    Notes = releaseNotes,
                });
            }
            ReleaseNoteViewModel.Init();
            ReleaseNoteViewModel.TextLines = new ObservableCollection<AppRelease>(appReleases);
            ReleaseNoteViewModel.ShowDialogHost();
            ReleaseNoteViewModel.Dispose();

            if (!isShow) ConfigHelper.UpdateSetting(appStatePath, new AppStateModel { IsUpdated = true });
        }

        private void UpdateAppSetting()
        {
            SessionInfo authenticationToken = _autheticationStore.Current;
            AppSetting setting = new AppSetting
            {
                FontSize = FontSize,
                YearOfWork = authenticationToken.YearOfWork,
                YearOfBudget = authenticationToken.YearOfBudget,
                Budget = authenticationToken.Budget,
                ColorSelected = ColorSelected
            };
            ConfigHelper.UpdateSetting(_appSettingConfigPath, setting);
        }

        private void UpdateAutoGenerateDataSetting()
        {
            SessionInfo authenticationToken = _autheticationStore.Current;
            if (authenticationToken?.AutoGenerateDataSetting != null)
            {
                AutoGenerateDataSetting setting = new AutoGenerateDataSetting();
                setting.ModelSettings = new List<ModelSetting>();
                foreach (KeyValuePair<string, Dictionary<string, string>> model in authenticationToken?.AutoGenerateDataSetting)
                {
                    ModelSetting modelSetting = new ModelSetting();
                    modelSetting.ModelName = model.Key;
                    List<PropertySetting> propertiesSetting = new List<PropertySetting>();
                    foreach (KeyValuePair<string, string> prop in model.Value)
                    {
                        propertiesSetting.Add(new PropertySetting { PropName = prop.Key, FormatVal = prop.Value });
                    }
                    modelSetting.PropertySettings = propertiesSetting;
                    setting.ModelSettings.Add(modelSetting);
                }
                Helper.ConfigHelper.UpdateSetting<AutoGenerateDataSetting>(_autoGenerateDataConfigPath, setting);
            }
        }

        private void LoadAutoGenerateDataSetting()
        {
            AutoGenerateDataSetting autoGenerateDataSetting = Helper.ConfigHelper.ReadSetting<AutoGenerateDataSetting>(_autoGenerateDataConfigPath);
            Dictionary<string, Dictionary<string, string>> modelMap = new Dictionary<string, Dictionary<string, string>>();
            if (autoGenerateDataSetting != null)
            {
                foreach (ModelSetting modelSetting in autoGenerateDataSetting.ModelSettings)
                {
                    Dictionary<string, string> propertiesMap = new Dictionary<string, string>();
                    foreach (PropertySetting propertySetting in modelSetting.PropertySettings)
                    {
                        propertiesMap.Add(propertySetting.PropName, propertySetting.FormatVal);
                    }
                    modelMap.Add(modelSetting.ModelName, propertiesMap);
                }
            }
            _autheticationStore.Current.AutoGenerateDataSetting = modelMap;
        }

        private void LoadDataGridSetting()
        {
            DataGridSetting dgSetting = Helper.ConfigHelper.ReadSetting<DataGridSetting>(_dataGridConfigPath);
            if (dgSetting != null)
            {
                foreach (Information dgInformation in dgSetting.DataGrids)
                {
                    if (!Application.Current.Properties.Contains(dgInformation.Name))
                    {
                        ObservableCollection<ColumnInfo> columnInfoes = new ObservableCollection<ColumnInfo>();
                        foreach (Column column in dgInformation.Columns)
                        {
                            ColumnInfo columnInfo = new ColumnInfo
                            {
                                PropertyPath = column.Name,
                                WidthValue = column.Width,
                                DisplayIndex = column.DisplayIndex,
                                Header = column.Header,
                                Visibility = column.Visibility
                            };
                            DataGridLengthUnitType widthValueType;
                            if (Enum.TryParse(column.WidthType, out widthValueType))
                                columnInfo.WidthType = widthValueType;
                            columnInfoes.Add(columnInfo);
                        }
                        Application.Current.Properties.Add(dgInformation.Name, new DataGridInformation(columnInfoes, dgInformation.FrozenColumnCount));
                    }
                }
            }
        }

        private void UpdateDataGridSetting()
        {
            DataGridSetting dgSetting = new DataGridSetting();
            dgSetting.DataGrids = new List<Information>();
            if (Application.Current.Properties.Count > 0)
            {
                foreach (object prop in Application.Current.Properties)
                {
                    Information info = new Information();
                    DictionaryEntry propData = (DictionaryEntry)prop;
                    if (propData.Value.GetType() == typeof(DataGridInformation))
                    {
                        DataGridInformation dgInfo = (DataGridInformation)propData.Value;
                        info.Name = propData.Key.ToString();
                        info.FrozenColumnCount = dgInfo.FrozenColumnCount;
                        info.Columns = new List<Column>();
                        foreach (ColumnInfo columnInfo in dgInfo.ColumnInfo)
                        {
                            info.Columns.Add(new Column
                            {
                                Name = columnInfo.PropertyPath,
                                Width = columnInfo.WidthValue,
                                WidthType = columnInfo.WidthType.ToString(),
                                DisplayIndex = columnInfo.DisplayIndex,
                                Header = columnInfo.Header,
                                Visibility = columnInfo.Visibility
                            });
                        }
                        dgSetting.DataGrids.Add(info);
                    }
                }
            }
            Helper.ConfigHelper.UpdateSetting<DataGridSetting>(_dataGridConfigPath, dgSetting);
        }

        private void OnViewUserDetail()
        {
            UserInfoViewModel userInfoViewModel = new UserInfoViewModel(_userService, _authenticationService, _autheticationStore, _mapper, _configuration);
            View.Shared.UserInfo userDialog = new View.Shared.UserInfo()
            {
                DataContext = userInfoViewModel
            };
            System.Threading.Tasks.Task<object> dialog = DialogHost.Show(userDialog, "RootDialog");
        }
    }
}
