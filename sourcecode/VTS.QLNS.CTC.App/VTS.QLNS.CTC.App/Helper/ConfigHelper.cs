using System.IO;
using System.Xml.Serialization;
using VTS.QLNS.CTC.Utility;

namespace VTS.QLNS.CTC.App.Helper
{
    public static class ConfigHelper
    {
        public static string TEMP_PATH = "TempPath";

        public static string TEMPLATE_XLXSPATH = "Template:XlxsPath";
        public static string BACKUP_TEMPLATE_XLXSPATH = "Template:BackUpXlxsPath";

        public static string CONFIG_PATH = "Config:Path";
        public static string CONFIG_APP_SETTING_PATH = "Config:AppSettingPath";
        public static string CONFIG_REPORT_LUONG_TRUY_LINH_SETTING_PATH = "Config:ReportLuongTruyLinhSettingPath";
        public static string CONFIG_REPORT_BHXH_SETTING_PATH = "Config:ReportSocialInsuranceSettingPath";
        public static string CONFIG_UPDATE_SETTING_PATH = "Config:UpdateSettingPath";
        public static string RELEASE_NOTE_LOCATION = "Config:ReleaseVersionLocation";

        public static string CONFIG_DATA_GRID_PATH = "Config:DataGridPath";
        public static string CONFIG_AUTO_GENERATE_DATA_PATH = "Config:AutoGenerateDataPath";

        public static string APPVERSION_LOCATION = "AppVersion:Location";
        public static string APPVERSION_UPDATE_EXECUTE_FILENAME = "AppVersion:UpdateExecuteFileName";

        public static string STORAGE_TYPE = "Storage:Type";
        public static string STORAGE_PATH = "Storage:Path";
        public static string STORAGE_IMAGE_PATH = "Storage:ImagePath";
        public static string STORAGE_IMAGE_TYPE = "Storage:ImageType";
        public static string STORAGE_UPLOAD_PATH = "Storage:UploadPath";

        public static string APP_BACKUP_LOCATION = "AppBackupLocation";

        public static string PDF64_LOCATION = "Pdf64Location";
        public static string PDF32_LOCATION = "Pdf32Location";
        //
        public static string FTP_USERNAME = "ConfigUserName:ftpUser";
        public static string FTP_PASSWORD = "ConfigUserName:ftpPassword";

        public static T ReadSetting<T>(string path)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(T));
            try
            {
                using FileStream fs = new FileStream(path, FileMode.Open);
                return (T)serializer.Deserialize(fs);
            }
            catch
            {
                return default(T);
            }
        }

        public static void UpdateSetting<T>(string path, T setting)
        {
            string dic = Path.GetDirectoryName(path);
            IOExtensions.CreateDirectoryIfNotExists(dic);

            XmlSerializer serializer = new XmlSerializer(typeof(T));
            using TextWriter writer = new StreamWriter(path);
            serializer.Serialize(writer, setting);
        }
    }
}
