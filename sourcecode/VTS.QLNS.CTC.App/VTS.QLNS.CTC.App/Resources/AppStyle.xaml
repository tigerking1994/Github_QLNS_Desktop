<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converters="clr-namespace:VTS.QLNS.CTC.App.Converters"
                    xmlns:extensions="clr-namespace:VTS.QLNS.CTC.App.Extensions"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
                    xmlns:component="clr-namespace:VTS.QLNS.CTC.App.Component">
    <!--Converters define-->
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:BooleanToVisibilityConverter x:Key="InvertBooleanToVisibilityConverter" TrueValue="Collapsed" FalseValue="Visible" />
    <converters:BooleanToVisibilityConverter x:Key="InvertBooleanToVisibilityHiddenConverter" TrueValue="Hidden" FalseValue="Visible" />
    <converters:MultiBooleanToVisibilityConverter x:Key="MultiBooleanToVisibilityConverter" />
    <converters:BooleanToStringConverter x:Key="BooleanToLockStatusConverter" TrueValue="Khóa" FalseValue="Mở" />
    <converters:BooleanToStringConverter x:Key="InvertBooleanToLockStatusConverter" TrueValue="Mở" FalseValue="Khóa" />
    <converters:BooleanToStringConverter x:Key="InvertBooleanToAccountStatusConverter" TrueValue="Kích hoạt" FalseValue="Khóa tài khoản" />
    <converters:BooleanToStringConverter x:Key="InvertBooleanToGenderConverter" TrueValue="Nam" FalseValue="Nữ" />
    <converters:BooleanToStringConverter x:Key="BooleanToLockIconConverter" TrueValue="Lock" FalseValue="LockOpen" />
    <converters:BooleanToStringConverter x:Key="InvertBooleanToLockIconConverter" TrueValue="LockOpen" FalseValue="Lock" />
    <converters:BooleanToStringConverter x:Key="InvertBooleanToDisplayIconConverter" TrueValue="EyeOffOutline" FalseValue="EyeOutline" />
    <converters:CellNumberToStringConverter x:Key="NumberToStringEmptyConverter" />
    <converters:CellStringToEmptyConverter x:Key="StringToEmptyConverter" />
    <converters:CellNumberToStringConverter x:Key="NumberToStringEmptyNoExponentialConverter" NoExponential="True" />
    <converters:CellNumberDecimalToStringConverter x:Key="NumberDecimalToStringEmptyConverter" />
    <converters:CellNegativeNumberToStringConverter x:Key="NegativeNumberToStringConverter" />
    <converters:MultipleWidthConverter x:Key="MultipleWidthConverter"/>
    <converters:DateTimeToStringConverter x:Key="DateTimeToStringConverter" />
    <converters:InvertBooleanConverter x:Key="InvertBooleanConverter"/>
    <converters:EnumToBoolConverter x:Key="EnumToBoolConverter" />
    <converters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
    <converters:BrushToHexConverter x:Key="BrushToHexConverter" />
    <converters:MultiValueEqualityConverter x:Key="MultiValueEqualityConverter" />
    <converters:CellNsbdNumberToStringConverter x:Key="NsbdNumberToStringConverter" />
    <converters:CensorshipToStringConvert x:Key="CensorshipToStringConvert" />
    <converters:HeaderPaddingConverter x:Key="HeaderPaddingConverter" />
    <converters:NullableToVisibilityConverter x:Key="NullableToVisibilityConverter" />
    <converters:LoaiChungTuToVisibilityConverter x:Key="NSSDToVisibilityConverter" VisibilityValue="1" />
    <converters:LoaiChungTuToVisibilityConverter x:Key="NSBDToVisibilityConverter" VisibilityValue="2" />
    <converters:AppVersionStatusConverter x:Key="AppVersionStatusConverter" />
    <converters:FileNameConverter x:Key="FileNameConverter" />
    <converters:ArithmeticConverter x:Key="ArithmeticConverter" />
    <converters:LoaiDuAnConverter x:Key="LoaiDuAnConvert" />
    <converters:SubStringConverter x:Key="SubStringConverter" />
    <converters:DollarToStringConverter x:Key="DollarToStringConverter" />
    <converters:VNDToStringConverter x:Key="VNDToStringConverter" />
    <converters:TotalCountDisplayConverter x:Key="TotalCountDisplayConverter" />
    <converters:MonthOfArmyConverter x:Key="MonthOfArmyConverter" />
    <converters:CellNumberIntToStringConverter x:Key="NumberIntToStringEmptyConverter"/>

    <system:Boolean x:Key="FalseValue">False</system:Boolean>
    <system:Boolean x:Key="TrueValue">True</system:Boolean>

    <Style x:Key="MaterialDesignWindow" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="TextElement.FontWeight" Value="Regular" />
        <Setter Property="TextElement.FontSize" Value="{Binding Value, ElementName=FontSizeSlider, FallbackValue=13}" />
        <!--<Setter Property="TextElement.FontSize" Value="13" />-->
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
        <!--<Setter Property="FontFamily" Value="{materialDesign:MaterialDesignFont}" />-->
        <!--<Setter Property="FontFamily" Value="Arial" />-->
    </Style>

    <Style x:Key="WindowCommandsPopupBoxStyle" TargetType="{x:Type wpf:PopupBox}" BasedOn="{StaticResource MaterialDesignPopupBox}">
        <Setter Property="Opacity" Value="0.5"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--PackIcon-->
    <Style TargetType="{x:Type materialDesign:PackIcon}" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="4 0 4 0"/>
    </Style>

    <Style x:Key="DialogScreenIconStyle" TargetType="materialDesign:PackIcon">
        <Setter Property="Margin" Value="4 0 4 0"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
    </Style>

    <Style x:Key="HeaderIconStyle" TargetType="materialDesign:PackIcon">
        <Setter Property="Margin" Value="4 0 4 0"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
    </Style>

    <Style x:Key="DataGridFilterIcon" TargetType="materialDesign:PackIcon">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
        <Setter Property="Opacity" Value="0.86"/>
    </Style>
    <!--PackIcon End-->

    <!--Button-->
    <Style x:Key="SearchBarBtnStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="DataGridActionButton" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Margin" Value="5 3 " />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="25" />
    </Style>
    <!--Button End-->
    
    <Style x:Key="SearchBarLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <!--TextBlock-->
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextTrimming" Value="WordEllipsis"></Setter>
    </Style>

    <Style x:Key="PageHeaderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource HeaderColor}"/>
        <Setter Property="FontSize" Value="20"/>
    </Style>

    <Style x:Key="SearchBarBtnTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="0 0 10 0" />
    </Style>

    <Style x:Key="SearchBarHeaderStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignHeadline6TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
    </Style>

    <Style x:Key="SearchBarHorizontalTextBoxStyle" BasedOn="{StaticResource MaterialDesignTextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="200" />
        <Setter Property="materialDesign:HintAssist.IsFloating" Value="True" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
    </Style>

    <Style x:Key="DialogScreenHeaderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="ParentLabel">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="4" />
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="ChildLabel">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="4" />
    </Style>

    <Style x:Key="HeaderDataGridStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Padding" Value="15 10 0 10" />
        <Setter Property="Background" Value="{StaticResource PrimaryHueLightBrush}" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="DataGridTextColumnStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignDataGridTextColumnStyle}">
        <Setter Property="TextTrimming" Value="WordEllipsis"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsDeleted}" Value="True">
                <Setter Property="TextDecorations" Value="Strikethrough" />
                <Setter Property="Foreground" Value="#d50000"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="DataGridTextColumnStyleImport" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignDataGridTextColumnStyle}">
        <Setter Property="TextTrimming" Value="WordEllipsis"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>        
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsDeleted}" Value="True">
                <Setter Property="TextDecorations" Value="Strikethrough" />
                <Setter Property="Foreground" Value="#d50000"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridTextColumnRightStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DataGridTextColumnStyle}">
        <Setter Property="TextAlignment" Value="Right"/>
    </Style>

    <Style x:Key="DataGridTextColumnLeftStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DataGridTextColumnStyle}">
        <Setter Property="TextAlignment" Value="Left"/>
    </Style>

    <Style x:Key="DataGridTextColumnCenterStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DataGridTextColumnStyle}">
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="DataGridTextColumnStyleWrap" TargetType="TextBlock" BasedOn="{StaticResource DataGridTextColumnStyle}">
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    
    <!--Detail action-->
    <Style x:Key="DataGridTextColumnDetailStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DataGridTextColumnStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsDeleted}" Value="True">
                <Setter Property="TextDecorations" Value="Strikethrough" />
                <Setter Property="Foreground" Value="#d50000"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IKieuChu}" Value="1">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IKieuChu}" Value="2">
                <Setter Property="FontStyle" Value="Italic"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IKieuChu}" Value="3">
                <Setter Property="FontStyle" Value="Normal"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridTextColumnDetailRightStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DataGridTextColumnDetailStyle}">
        <Setter Property="TextAlignment" Value="Right"/>
    </Style>

    <Style x:Key="DataGridTextColumnDetailCenterStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DataGridTextColumnDetailStyle}">
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="DataGridTextColumnDetailLeftStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DataGridTextColumnDetailStyle}">
        <Setter Property="TextAlignment" Value="Left"/>
    </Style>

    <Style x:Key="TblBold" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Margin" Value="10 0 0 0" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <Style x:Key="TblItem" TargetType="TextBlock">
        <Setter Property="Margin" Value="60 0 0 0" />
    </Style>
    <!--TextBlock End-->

    <!--TextBox-->
    <Style TargetType="TextBox" x:Key="TextBoxTotalCell" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Setter Property="Foreground" Value="Red"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Margin" Value="0 0 13 0"/>
    </Style>
   
    <Style TargetType="TextBox" x:Key="TextBoxCell" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Margin" Value="0 0 10 0"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <!--<Style x:Key="TextboxWithMaxLengthStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Setter Property="materialDesign:TextFieldAssist.CharacterCounterStyle">
            <Setter.Value>
                <Style TargetType="TextBlock" />
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style x:Key="MaterialDesignFloatingHintTextBox" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
        <Setter Property="materialDesign:HintAssist.IsFloating" Value="True" />
        <Setter Property="materialDesign:TextFieldAssist.CharacterCounterStyle">
            <Setter.Value>
                <Style TargetType="TextBlock" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TbData" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="4" />
    </Style>

    <Style x:Key="TbDataEdit" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="4" />
        <Setter Property="MaxLength" Value="17" />
        <Setter Property="materialDesign:TextFieldAssist.CharacterCounterStyle">
            <Setter.Value>
                <Style TargetType="TextBlock" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridTextColumnEditingStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}">
    </Style>

    <Style x:Key="DataGridTextColumnEditingRightCell" TargetType="{x:Type TextBox}" BasedOn="{StaticResource DataGridTextColumnEditingStyle}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="TextAlignment" Value="Right"/>
    </Style>
    <!--TextBox End-->

    <!--DataGrid-->
    <Style BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
    </Style>
    <Style x:Key="MaterialDesignDataGridColumnHeaderRef" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
    </Style>

    <Style x:Key="MaterialDesignDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:DataGridAssist.ColumnHeaderPadding)}" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignColumnHeader}" />
        <Setter Property="BorderBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
        <Setter Property="BorderThickness" Value="{Binding GridLinesVisibility, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={StaticResource GridLinesVisibilityBorderToThicknessConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="GoToVisible">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="GoToHidden">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="Transparent">
                        <Border
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <materialDesign:ListSortDirectionIndicator
                                    x:Name="SortDirectionIndicator"
                                    IsTabStop="False"
                                    ListSortDirection="{TemplateBinding SortDirection}"
                                    HorizontalAlignment="Left"
                                    Width="0"
                                    Height="12"
                                    Margin="-16 0 0 0"
                                    Opacity="0.45"
                                    Visibility="{Binding CanUserSortColumns, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                <ContentPresenter
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentPresenter.Resources>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="TextTrimming" Value="WordEllipsis" />
                                            <Setter Property="materialDesign:TextBlockAssist.AutoToolTip" Value="True" />
                                        </Style>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource GoToVisible}" Name="GoToVisible" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Multiple header template -->
    <DataTemplate x:Key="CenterHeader">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="1*"/>
            </Grid.RowDefinitions>
            <Border
                Padding="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:DataGridAssist.ColumnHeaderPadding)}"
                BorderThickness="0 0 0 0"
                BorderBrush="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}">
                <TextBlock />
            </Border>
            <Border
                Grid.Row="1"
                Padding="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:DataGridAssist.ColumnHeaderPadding)}"
                BorderThickness="0 1 1 0"
                BorderBrush="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}">
                <TextBlock
                    Text="{Binding}"
                    TextWrapping="Wrap"
                    TextAlignment="Center"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"/>
            </Border>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="RightHeader">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="1*"/>
            </Grid.RowDefinitions>
            <Border
                Padding="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:DataGridAssist.ColumnHeaderPadding)}"
                BorderThickness="0 0 1 0"
                BorderBrush="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}">
                <TextBlock />
            </Border>
            <Border
                Grid.Row="1"
                Padding="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:DataGridAssist.ColumnHeaderPadding)}"
                BorderThickness="0 1 1 0"
                BorderBrush="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}">
                <TextBlock
                    Text="{Binding}"
                    TextWrapping="Wrap"
                    TextAlignment="Center"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"/>
            </Border>
        </Grid>
    </DataTemplate>

    <Style x:Key="DataGridColumnHeaderNoBorder" TargetType="DataGridColumnHeader">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
    </Style>
    <!-- Multiple header template End -->

    <Style x:Key="MaterialDesignDataGridRowHeader" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="BorderBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
        <Setter Property="BorderThickness" Value="{Binding GridLinesVisibility, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={StaticResource GridLinesVisibilityBorderToThicknessConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid MinWidth="24">
                        <Border 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <Control SnapsToDevicePixels="false" Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Visibility="{Binding (Validation.HasError), Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"/>
                            </StackPanel>
                        </Border>
                        <Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource MaterialDesignGridRowHeaderGripper}" VerticalAlignment="Top"/>
                        <Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource MaterialDesignGridRowHeaderGripper}" VerticalAlignment="Bottom"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridColumnHeaderWrap" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock TextWrapping="Wrap" TextAlignment="Center" Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridColumnHeaderCenter" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock TextWrapping="Wrap" TextAlignment="Center" Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridColumnHeaderCenterNoPadding" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource DataGridColumnHeaderCenter}">
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <Style x:Key="DataGridCellDetail" TargetType="DataGridCell" BasedOn="{StaticResource MaterialDesignDataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
            <DataTrigger Binding="{Binding IsEditable}" Value="False">
                <Setter Property="IsTabStop" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCellDetailNoPadding" TargetType="DataGridCell" BasedOn="{StaticResource DataGridCellDetail}">
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="FooterDataGridCellDetail" TargetType="DataGridCell" BasedOn="{StaticResource MaterialDesignDataGridCell}">
        <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        <Setter Property="TextBlock.TextAlignment" Value="Right" />
        <Setter Property="TextBlock.FontWeight" Value="SemiBold" />
        <Setter Property="Foreground" Value="Red"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
    </Style>

    <Style x:Key="DataGridRowIndex" TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsExpandGroup}" Value="true">
                <Setter Property="Background" Value="#e0f2f1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsHangCha}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BHangCha}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter
            Property="extensions:Behaviours.DoubleClickCommand"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.SelectionDoubleClickCommand}"/>
    </Style>

    <Style x:Key="DataGridRowIndexExpand" TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
        <Setter Property="extensions:Behaviours.DoubleClickCommand"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.SelectionDoubleClickCommand}"/>
        <Setter Property="Visibility" Value="{Binding IsExpand, Converter={StaticResource BooleanToVisibilityConverter}}"></Setter>
    </Style>

    <Style x:Key="DataGridRowDetail" TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDataGridRowHoverBackground}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsHangCha}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BHangCha}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding IsAdded}" Value="True">
                <Setter Property="Background" Value="#e0f2f1"/>
            </DataTrigger>-->
            <DataTrigger Binding="{Binding IsModified}" Value="True">
                <Setter Property="Background" Value="#e0f2f1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDeleted}" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsRemainRow}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontStyle" Value="Italic"/>
                <Setter Property="Foreground" Value="#D70040"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DataGridRowDetailExpanded"
           TargetType="DataGridRow"
           BasedOn="{StaticResource MaterialDesignDataGridRow}">
        <Setter Property="Visibility"
                Value="{Binding IsExpand, Converter={StaticResource BooleanToVisibilityConverter}}"></Setter>
        <Setter Property="Background"
                Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="Transparent" />
            </Trigger>
            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource MaterialDesignDataGridRowHoverBackground}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsHangCha}"
                         Value="True">
                <Setter Property="FontWeight"
                        Value="Bold" />
            </DataTrigger>
            <DataTrigger Binding="{Binding BHangCha}"
                         Value="True">
                <Setter Property="FontWeight"
                        Value="Bold" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsModified}"
                         Value="True">
                <Setter Property="Background"
                        Value="#e0f2f1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDeleted}"
                         Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsRemainRow}"
                         Value="True">
                <Setter Property="FontWeight"
                        Value="Bold" />
                <Setter Property="FontStyle"
                        Value="Italic" />
                <Setter Property="Foreground"
                        Value="#D70040" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="CategoryImportRowDetail" TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDataGridRowHoverBackground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCellCheckDetail" TargetType="DataGridCell" BasedOn="{StaticResource DataGridCellDetail}">
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter
                    Property="extensions:CellDoubleClickBehaviours.DoubleClickCommand"
                    Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.SelectionDoubleClickCommand}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="GenericDataGridRowDetail" TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter
            Property="extensions:Behaviours.DoubleClickCommand"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.SelectionDoubleClickCommand}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDataGridRowHoverBackground}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsModified}" Value="True">
                <Setter Property="Background" Value="#e0f2f1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDeleted}" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                <Setter Property="Foreground" Value="#d50000"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsHangCha}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IKieuChu}" Value="1">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IKieuChu}" Value="2">
                <Setter Property="FontStyle" Value="Italic"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IKieuChu}" Value="3">
                <Setter Property="FontStyle" Value="Normal"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MigrateNSDataGridRowDetail" TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsAllowSelected}" Value="False">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ReadOnlyDataGridRowDetail" TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="GenericDataGridCellDetail" TargetType="DataGridCell" BasedOn="{StaticResource MaterialDesignDataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridRowEstimateDetail" TargetType="DataGridRow" BasedOn="{StaticResource DataGridRowDetail}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IRowType}" Value="2">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontStyle" Value="Italic"/>
                <Setter Property="Foreground" Value="#D70040"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsPhanBo}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MultilHeaderDataGrid" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MaterialDesignDataGrid}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}"
                        CornerRadius="{TemplateBinding materialDesign:DataGridAssist.CornerRadius}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button 
                                            Command="{x:Static DataGrid.SelectAllCommand}" 
                                            Focusable="false" 
                                            Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" 
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" 
                                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <StackPanel 
                                            Grid.Row="0"
                                            Grid.Column="1" 
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
                                            <DataGrid x:Name="PART_MultiHeader" Style="{DynamicResource HeaderDataGrid}" />
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" />
                                        </StackPanel>
                                        <ScrollContentPresenter 
                                            x:Name="PART_ScrollContentPresenter" 
                                            CanContentScroll="{TemplateBinding CanContentScroll}"
                                            Grid.Column="0"
                                            Grid.ColumnSpan="2" 
                                            Grid.Row="1"/>
                                        <ScrollBar 
                                            x:Name="PART_VerticalScrollBar" 
                                            Grid.Column="2" 
                                            Maximum="{TemplateBinding ScrollableHeight}" 
                                            Orientation="Vertical" 
                                            Grid.Row="1"
                                            Grid.RowSpan="2"
                                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                            ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <DataGrid
                                            Grid.Column="0"
                                            Grid.ColumnSpan="2"
                                            Grid.Row="2"
                                            x:Name="PART_DataGridFooter" 
                                            Style="{DynamicResource FooterDataGrid}"
                                            CellStyle="{DynamicResource FooterDataGridCellDetail}">
                                        </DataGrid>
                                        <Grid Grid.Column="1" Grid.Row="3">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar 
                                                x:Name="PART_HorizontalScrollBar" 
                                                Grid.Column="1" 
                                                Maximum="{TemplateBinding ScrollableWidth}" 
                                                Orientation="Horizontal" 
                                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                                                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignDivider}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <!--<Setter Property="FontSize" Value="13"/>-->
        <Setter Property="GridLinesVisibility" Value="Horizontal" />
        <Setter Property="HorizontalGridLinesBrush">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource RemoveAlphaBrushConverter}">
                    <Binding Path="BorderBrush" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="Background" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalGridLinesBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource Self}}" />
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="materialDesign:DataGridAssist.AutoGeneratedCheckBoxStyle" Value="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}" />
        <Setter Property="materialDesign:DataGridAssist.AutoGeneratedEditingCheckBoxStyle" Value="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}" />
        <Setter Property="materialDesign:DataGridAssist.AutoGeneratedTextStyle" Value="{StaticResource MaterialDesignDataGridTextColumnStyle}" />
        <Setter Property="materialDesign:DataGridAssist.AutoGeneratedEditingTextStyle" Value="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}" />
        <Setter Property="materialDesign:DataGridAssist.EnableEditBoxAssist" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}"
                        CornerRadius="{TemplateBinding materialDesign:DataGridAssist.CornerRadius}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button 
                                            Command="{x:Static DataGrid.SelectAllCommand}" 
                                            Focusable="false" 
                                            Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" 
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" 
                                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <Border 
                                            Grid.Row="0"
                                            Grid.Column="1" 
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" />
                                        </Border>
                                        <ScrollContentPresenter 
                                            x:Name="PART_ScrollContentPresenter" 
                                            CanContentScroll="{TemplateBinding CanContentScroll}"
                                            Grid.Column="0"
                                            Grid.ColumnSpan="2" 
                                            Grid.Row="1"/>
                                        <ScrollBar 
                                            x:Name="PART_VerticalScrollBar" 
                                            Grid.Column="2" 
                                            Maximum="{TemplateBinding ScrollableHeight}" 
                                            Orientation="Vertical" 
                                            Grid.Row="1"
                                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                            ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar 
                                                x:Name="PART_HorizontalScrollBar" 
                                                Grid.Column="1" 
                                                Maximum="{TemplateBinding ScrollableWidth}" 
                                                Orientation="Horizontal" 
                                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                                                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--DataGrid End-->

    <!--Separator-->
    <Style x:Key="SearchBarHorizontalDividerStyle" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
        <Setter Property="Margin" Value="6,0,6,0"/>
        <Setter Property="Width" Value="25" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignDivider}" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <TransformGroup.Children>
                        <TransformCollection>
                            <RotateTransform Angle="90"/>
                        </TransformCollection>
                    </TransformGroup.Children>
                </TransformGroup>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Separator End-->

    <!--Combobox-->
    <Style x:Key="SearchBarHorizontalComboBoxStyle" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="Width" Value="200" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="materialDesign:HintAssist.IsFloating" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="GridComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type ComboBox}, ResourceId=MaterialDataGridComboBoxColumnEditingStyle}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsDeleted}" Value="True">
                <Setter Property="Foreground" Value="#d50000"/>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--Combobox End-->

    <!--Tab-->
    <Style x:Key="TabItemStyle" TargetType="TabItem" BasedOn="{StaticResource MaterialDesignNavigationRailTabItem}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="0"/>
    </Style>

    <Style x:Key="ExplainTabItemStyle" TargetType="TabItem" BasedOn="{StaticResource MaterialDesignNavigationRailTabItem}">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="0"/>
    </Style>
    <!--Tab End-->

    <!--Multiple selectbox-->
    <LinearGradientBrush x:Key="ActiveButtonBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#EAF6FD" Offset="0.15" />
            <GradientStop Color="#D9F0FC" Offset=".5" />
            <GradientStop Color="#BEE6FD" Offset=".5" />
            <GradientStop Color="#A7D9F5" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ActiveBorderBrush" Color="DarkBlue" />

    <!--Style for a ListBoxItem displayed inside the embedded list box, to make it a check box when mode = multiple.-->
    <Style x:Key="CheckBoxedItemStyleKey" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Background="Transparent">
                        <CheckBox Focusable="false" 
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"
                                  BorderBrush="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}, Path=Foreground}"                                           
                                  IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                            <CheckBox.Content>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </CheckBox.Content>
                        </CheckBox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style for a ListBoxItem displayed inside the embedded list box, when mode = single-->
    <Style x:Key="NormalItemStyleKey" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="border" 
                            Margin="0,-1"
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="1"                            
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{x:Static SystemColors.HighlightBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{x:Static SystemColors.HighlightBrush}" />
                            <Setter Property="Foreground" Value="{x:Static SystemColors.HighlightTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
                            Margin="2"
                            StrokeThickness="1"
                            Stroke="#b0000000"
                            StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Template for the toggle button which is the main view of the control-->
    <ControlTemplate x:Key="MultiSelectComboBoxToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border BorderThickness="{TemplateBinding BorderThickness}"  
                    Background="{TemplateBinding Background}" 
                    BorderBrush="{TemplateBinding BorderBrush}"
                    SnapsToDevicePixels="true">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <ContentPresenter Content="{TemplateBinding Content}" />

                <Border Name="arrowBorder" Grid.Column="1" Width="16" BorderBrush="{TemplateBinding BorderBrush}">
                    <Path HorizontalAlignment="Center" VerticalAlignment="Center" 
                                      Fill="{TemplateBinding BorderBrush}" Data="M 0 0 L 7 0 L 3.5 4 Z" />
                </Border>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="arrowBorder" Property="Background" Value="{StaticResource ActiveButtonBrush}" />
                <Setter TargetName="arrowBorder" Property="BorderThickness" Value="1,0,0,0" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="arrowBorder" Property="Background" Value="{StaticResource ActiveButtonBrush}" />
                <Setter TargetName="arrowBorder" Property="BorderThickness" Value="1,0,0,0" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Expander-->
    <Duration x:Key="ExpandDuration">0:0:0.250</Duration>
    <Duration x:Key="CollapseDuration">0:0:0.200</Duration>

    <KeyTime x:Key="ExpandKeyTime">0:0:0.250</KeyTime>
    <KeyTime x:Key="CollapseKeyTime">0:0:0.200</KeyTime>

    <Style x:Key="MaterialDesignExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="180"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <wpf:PackIcon x:Name="ExpandPath" Kind="ChevronDown"
                                      Opacity="0.38" Height="24" Width="24"
                                      Foreground="{TemplateBinding Foreground}"
                                      RenderTransformOrigin="0.5 0.5">
                            <wpf:PackIcon.RenderTransform>
                                <RotateTransform x:Name="ExpandPathRotateTransform"/>
                            </wpf:PackIcon.RenderTransform>
                        </wpf:PackIcon>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignHorizontalHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Yellow"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <StackPanel>
                        <Border Background="{TemplateBinding Background}" Padding="{Binding Path=(wpf:ExpanderAssist.HorizontalHeaderPadding) , RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter Grid.Column="1"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>

                                <ToggleButton x:Name="ExpanderButton"
                                          Grid.Column="0"
                                          VerticalAlignment="Center"
                                          RenderTransformOrigin="0.5 0.5"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignExpanderToggleButton}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Up">
                                                    <Setter Property="RenderTransform">
                                                        <Setter.Value>
                                                            <RotateTransform Angle="180"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                        </Border>
                        <Separator HorizontalAlignment="Stretch" Background="{DynamicResource MaterialDesignDivider}"/>
                    </StackPanel>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignHorizontalHeaderStyle1" TargetType="{x:Type ToggleButton}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>

                            <ToggleButton x:Name="ExpanderButton1"
                                          VerticalAlignment="Center"
                                          RenderTransformOrigin="0.5 0.5"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignExpanderToggleButton}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Up">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                        </StackPanel>
                        <Separator HorizontalAlignment="Stretch" Background="{DynamicResource MaterialDesignDivider}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignVerticalHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" Padding="{Binding Path=(wpf:ExpanderAssist.VerticalHeaderPadding) , RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="16"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <ToggleButton x:Name="ExpanderButton"
                                          Grid.Row="0"
                                          VerticalAlignment="Center"
                                          RenderTransformOrigin="0.5 0.5"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignExpanderToggleButton}">
                                        <Style.Triggers>

                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Left">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="90"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Right">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="-90"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <ContentPresenter Grid.Row="2"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridExpander" TargetType="{x:Type Expander}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="wpf:ExpanderAssist.HeaderBackground" Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <converters:ExpanderRotateAngleConverter x:Key="ExpanderRotateAngleConverter" />
                    </ControlTemplate.Resources>
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="Expanded">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                             Storyboard.TargetName="ContentPanel" 
                                                             From="0" To="1"
                                                             Duration="{StaticResource ExpandDuration}"/>
                                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                             From="0" To="1"
                                                             Duration="{StaticResource ExpandDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>

                                    <VisualTransition To="Collapsed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                             Storyboard.TargetName="ContentPanel" 
                                                             From="1" To="0" 
                                                             Duration="{StaticResource CollapseDuration}"/>
                                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                             From="1" To="0"
                                                             Duration="{StaticResource CollapseDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                         Storyboard.TargetName="ContentPanel" 
                                                         To="1" 
                                                         Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                         To="1" 
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="ContentPanel"
                                                         To="0"
                                                         Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                         To="0"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <DockPanel Background="{TemplateBinding Background}">
                            <ToggleButton Name="HeaderSite"
                                          Focusable="False"
                                          IsTabStop="False"
                                          DockPanel.Dock="Top"
                                          BorderThickness="0" Cursor="Hand"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource MaterialDesignHorizontalHeaderStyle}"
                                          TextElement.FontSize="{TemplateBinding wpf:ExpanderAssist.HeaderFontSize}"
                                          Opacity="1"
                                          Foreground="{TemplateBinding Foreground}"
                                          Background="{TemplateBinding wpf:ExpanderAssist.HeaderBackground}"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          ContentStringFormat="{TemplateBinding HeaderStringFormat}"/>

                            <Border Name="ContentSite">
                                <Border.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ContentSiteScaleTransform" />
                                        <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander}, Converter={StaticResource ExpanderRotateAngleConverter}}"/>
                                    </TransformGroup>
                                </Border.LayoutTransform>

                                <Grid Name="ContentPanel"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.LayoutTransform>
                                        <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander}, Converter={StaticResource ExpanderRotateAngleConverter}, ConverterParameter=-1}"/>
                                    </Grid.LayoutTransform>

                                    <ContentPresenter Name="PART_Content" Focusable="False"
                                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>

                                </Grid>
                            </Border>

                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignVerticalHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignVerticalHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignHorizontalHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignHorizontalHeaderStyle}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBlockExpander" TargetType="{x:Type Expander}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="wpf:ExpanderAssist.HeaderBackground" Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <converters:ExpanderRotateAngleConverter x:Key="ExpanderRotateAngleConverter" />
                    </ControlTemplate.Resources>
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="Expanded">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                             Storyboard.TargetName="ContentPanel" 
                                                             From="0" To="1"
                                                             Duration="{StaticResource ExpandDuration}"/>
                                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                             From="0" To="1"
                                                             Duration="{StaticResource ExpandDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>

                                    <VisualTransition To="Collapsed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                             Storyboard.TargetName="ContentPanel" 
                                                             From="1" To="0" 
                                                             Duration="{StaticResource CollapseDuration}"/>
                                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                             From="1" To="0"
                                                             Duration="{StaticResource CollapseDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                         Storyboard.TargetName="ContentPanel" 
                                                         To="1" 
                                                         Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                         To="1" 
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="ContentPanel"
                                                         To="0"
                                                         Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                         To="0"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <DockPanel>
                            <ToggleButton Name="HeaderSite"
                                          Focusable="False"
                                          IsTabStop="False"
                                          DockPanel.Dock="Top"
                                          BorderThickness="0" Cursor="Hand"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource MaterialDesignHorizontalHeaderStyle1}"
                                          TextElement.FontSize="{TemplateBinding wpf:ExpanderAssist.HeaderFontSize}"
                                          Opacity="1"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          ContentStringFormat="{TemplateBinding HeaderStringFormat}"/>

                            <Border Name="ContentSite">
                                <Border.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ContentSiteScaleTransform" />
                                        <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander}, Converter={StaticResource ExpanderRotateAngleConverter}}"/>
                                    </TransformGroup>
                                </Border.LayoutTransform>

                                <Grid Name="ContentPanel"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.LayoutTransform>
                                        <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander}, Converter={StaticResource ExpanderRotateAngleConverter}, ConverterParameter=-1}"/>
                                    </Grid.LayoutTransform>

                                    <ContentPresenter Name="PART_Content" Focusable="False"
                                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>

                                </Grid>
                            </Border>

                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignVerticalHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignVerticalHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignHorizontalHeaderStyle1}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignHorizontalHeaderStyle1}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Simple Expander Button's Template-->
    <ControlTemplate x:Key="SimpleExpanderButtonTemp" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                Padding="{TemplateBinding Padding}"
                    >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"
                           Grid.ColumnSpan="2"/>
                <Path x:Name="Sign"
                      Grid.Column="0"
                      Data="M 0,5 H 10 M 5,0 V 10 Z"
                      Stroke="#FF666666"
                      Width="10"
                      Height="10"
                      StrokeThickness="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5"
                />
                <ContentPresenter x:Name="HeaderContent"
                                  Grid.Column="1"
                                  Margin="4,0,0,0"
                                  ContentSource="Content"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!--Change the sign to minus when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Setter Property="Data" TargetName="Sign" Value="M 0,5 H 10 Z"/>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"
                                 Value="true">
                <Setter Property="Stroke"
                        Value="#222"
                        TargetName="Sign"/>
            </Trigger>
            <Trigger Property="IsPressed"
                                 Value="true">
                <Setter Property="Stroke"
                        Value="#FF003366"
                        TargetName="Sign"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--End Expander-->

    <Style x:Key="WrappedColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Foreground="White" TextWrapping="Wrap" Text="{Binding}"></TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="DataGrid" x:Key="HeaderDataGrid" BasedOn="{StaticResource MaterialDesignDataGrid}">
        <Setter Property="GridLinesVisibility" Value="All" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="CanUserSortColumns" Value="False" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeColumns" Value="True" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="RowHeight" Value="0" />
        <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="BorderThickness" Value="0 0 0 0" />
    </Style>
    
    <Style TargetType="DataGrid" x:Key="FooterDataGrid" BasedOn="{StaticResource MaterialDesignDataGrid}">
        <Setter Property="GridLinesVisibility" Value="All" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="CanUserSortColumns" Value="False" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeColumns" Value="False" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="HeadersVisibility" Value="None" />
        <Setter Property="BorderThickness" Value="0 1 0 0" />
        <Setter Property="materialDesign:DataGridAssist.CornerRadius" Value="0 0 0 0" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
    </Style>

    <ControlTemplate x:Key="ErrorMessage">
        <Grid>
            <AdornedElementPlaceholder/>
            <TextBlock  FontSize="10" Text="{Binding [0].ErrorContent}" Foreground="Red" VerticalAlignment="Bottom" HorizontalAlignment="Left" />
        </Grid>
    </ControlTemplate>
</ResourceDictionary>